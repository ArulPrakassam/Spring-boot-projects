openapi: 3.0.3
info:
  title: Employee Records Management System
  description: |
    This API exposes endpoints to manage employee records. All routes are protected by JWT token.

    [Developed by Arul Prakassam](https://github.com/ArulPrakassam)
  version: 1.0.0
servers:
  - url: https://employee-records-management.onrender.com/
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
tags:
  - name: Auth
  - name: Employee Records Management System
paths:
  /api/employees:
    get:
      tags:
        - Employee Records Management System
      summary: Get All Employee Records
      description: |
        Fetch employee records.

        Optional fields for pagination - page, size.  Example - page=0&size=5. 

        Optional field for sorting - sort. Example -
        sort=name,asc, sort=age,desc. Other values for sorting (fields - id,
        name, department, age, salary. sorting order - asc, desc).
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            example: 0
        - name: size
          in: query
          schema:
            type: integer
            example: 10
        - name: sort
          in: query
          schema:
            type: string
            example: "id,asc"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
                status: 200
                message: Successful Request
                data:
                  - id: 1
                    name: John Doe
                    department: Sales
                    age: 30
                    email: johndoe@example.com
                    salary: 50000
                    createdAt: "2025-03-31 17:12:38"
                    updatedAt: "2025-03-31 17:12:38"
                  - id: 2
                    name: Jane Smith
                    department: Marketing
                    age: 28
                    email: janesmith@example.com
                    salary: 55000
                    createdAt: "2025-03-31 17:12:38"
                    updatedAt: "2025-03-31 17:12:38"

        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              example:
                success: false
                status: 400
                message: >-
                  Bad Request. Invalid sort format. Use 'field,asc' or
                  'field,desc'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: 401 - Unauthorized
                  value:
                    success: false
                    status: 401
                    message: No authentication token specified in x-auth-token header
                example-1:
                  summary: 401 - Unauthorized
                  value:
                    success: false
                    status: 401
                    message: >-
                      Access token is not valid or has expired, you will need to
                      login
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
              example:
                success: false
                status: 500
                message: "An error occurred: Internal Server Error"
    post:
      tags:
        - Employee Records Management System
      summary: Add new Employee Record
      description: >-
        Add new employee record. Required fields are name, department, age,
        salary.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Leodas111
                department: cyber
                age: 22
                email: leo11111@example.com
                salary: 40000
      security:
        - bearerAuth: []
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
                status: 201
                message: Employee added successfully
                data:
                  id: 11
                  name: Leodas111
                  department: cyber
                  age: 22
                  email: leo11111@example.com
                  salary: 40000
                  createdAt: "2025-03-31 18:57:15"
                  updatedAt: "2025-03-31 18:57:15"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              example:
                success: false
                status: 400
                message: Bad Request. Department is required
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: 401 - Unauthorized
                  value:
                    success: false
                    status: 401
                    message: No authentication token specified in x-auth-token header
                example-1:
                  summary: 401 - Unauthorized
                  value:
                    success: false
                    status: 401
                    message: >-
                      Access token is not valid or has expired, you will need to
                      login
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                success: false
                status: 403
                message: Access Denied.  Not able to perform operation.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
              example:
                success: false
                status: 500
                message: "An error occurred: Internal Server Error"
  /api/employees/{id}:
    get:
      tags:
        - Employee Records Management System
      summary: Get Employee Record By id
      description: >-
        Fetch an employee record based on the given id in url param. No
        additional fields required.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the employee
          schema:
            type: integer
            example: 1
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
                status: 200
                message: Successful Request
                data:
                  id: 1
                  name: John Doe
                  department: Sales
                  age: 30
                  email: johndoe@example.com
                  salary: 50000
                  createdAt: "2025-03-31 17:12:38"
                  updatedAt: "2025-03-31 17:12:38"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: 401 - Unauthorized
                  value:
                    success: false
                    status: 401
                    message: No authentication token specified in x-auth-token header
                example-1:
                  summary: 401 - Unauthorized
                  value:
                    success: false
                    status: 401
                    message: >-
                      Access token is not valid or has expired, you will need to
                      login
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              example:
                success: false
                status: 404
                message: "No Employee with id: 11"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
              example:
                success: false
                status: 500
                message: "An error occurred: Internal Server Error"
    delete:
      tags:
        - Employee Records Management System
      summary: Delete Employee Record
      description: >-
        Delete an employee record based on the given id in url param. No
        additional fields required.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the employee
          schema:
            type: integer
            example: 1
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
                status: 200
                message: Successful Request
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: 401 - Unauthorized
                  value:
                    success: false
                    status: 401
                    message: No authentication token specified in x-auth-token header
                example-1:
                  summary: 401 - Unauthorized
                  value:
                    success: false
                    status: 401
                    message: >-
                      Access token is not valid or has expired, you will need to
                      login
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                success: false
                status: 403
                message: Access Denied.  Not able to perform operation.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              example:
                success: false
                status: 404
                message: Not able to delete employee data.  No Employee with id 1 found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
              example:
                success: false
                status: 500
                message: "An error occurred: Internal Server Error"
    put:
      tags:
        - Employee Records Management System
      summary: Update Employee Record
      description: >-
        Update an employee record based on the given id in url param. Required
        fields are name, department, age, salary.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the employee
          schema:
            type: integer
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: John Doe
                department: Sales
                age: 27
                email: johndoe@example.com
                salary: 50000
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
                status: 200
                message: Employee updated successfully
                data:
                  id: 2
                  name: John Doe
                  department: Sales
                  age: 27
                  email: johndoe@example.com
                  salary: 50000
                  createdAt: "2025-03-31 17:12:38"
                  updatedAt: "2025-03-31 19:04:30"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              example:
                success: false
                status: 400
                message: Bad Request. Age must be at least 18
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: 401 - Unauthorized
                  value:
                    success: false
                    status: 401
                    message: No authentication token specified in x-auth-token header
                example-1:
                  summary: 401 - Unauthorized
                  value:
                    success: false
                    status: 401
                    message: >-
                      Access token is not valid or has expired, you will need to
                      login
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
              example:
                success: false
                status: 403
                message: Access Denied.  Not able to perform operation.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              example:
                success: false
                status: 404
                message: >-
                  Not able to update employee data.  No Employee with id 21
                  found
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
              example:
                success: false
                status: 500
                message: "An error occurred: Internal Server Error"
  /api/employees/search:
    get:
      tags:
        - Employee Records Management System
      summary: Search Employee Record
      description: >-
        Search an employee record based on the given search term in url param.
        Search by employee name or department. Example - query=sales, query=john
      security:
        - bearerAuth: []
      parameters:
        - name: query
          in: query
          schema:
            type: string
            example: john
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
                status: 200
                message: Successful Request
                data:
                  - id: 3
                    name: Alice Johnson
                    department: Development
                    age: 35
                    email: alicej@example.com
                    salary: 70000
                    createdAt: "2025-03-31 17:12:38"
                    updatedAt: "2025-03-31 17:12:38"
                  - id: 7
                    name: Johnson
                    department: HR
                    age: 30
                    email: johnson@example.com
                    salary: 50000
                    createdAt: "2025-03-31 17:12:38"
                    updatedAt: "2025-03-31 17:12:38"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: 401 - Unauthorized
                  value:
                    success: false
                    status: 401
                    message: No authentication token specified in x-auth-token header
                example-1:
                  summary: 401 - Unauthorized
                  value:
                    success: false
                    status: 401
                    message: >-
                      Access token is not valid or has expired, you will need to
                      login
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
              example:
                success: false
                status: 500
                message: "An error occurred: Internal Server Error"
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register
      description: Register as an ADMIN or USER.  ADMIN will have full access. USER will be able to access only GET routes.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: David
                email: david@example.com
                password: david1
                role: ADMIN
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
                status: 201
                message: User Created Successfully
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              example:
                success: false
                status: 400
                message: Bad Request
  /auth/login:
    post:
      tags:
        - Auth
      summary: Login
      description: Login with registered credentials and get token to use protected routes.  The token is valid for one day.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                email: david@example.com
                password: david1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                success: true
                status: 200
                message: Successful Request
                data:
                  token: >-
                    eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJqYWRlQGV4YW1wbGUuY29tIiwicm9sZSI6IltST0xFX1VTRVJdIiwiaWF0IjoxNzQzNDI1NDg0LCJleHAiOjE3NDM1MTE4ODR9.d0GeaUSv79DTW23iF1w5NXP4jX31XkZak9mkWUWeKXE
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              example:
                success: false
                status: 400
                message: Bad Request
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
              example:
                success: false
                status: 401
                message: Unauthorized Request. Bad credentials
